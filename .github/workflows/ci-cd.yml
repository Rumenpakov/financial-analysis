name: Deploy AI Service to AWS ECS

on:
  push:
    branches:
      - main
    paths:
      - 'ai_service/**'
  workflow_dispatch:

env:
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: ai-insights-service
  ECS_CLUSTER: ai-insights-cluster
  ECS_SERVICE: ai-insights-service
  ECS_TASK_DEFINITION_FAMILY: ai-insights-service-task
  CONTAINER_NAME: ai-service

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # --- Step 1: Checkout Code ---
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Step 2: Configure AWS Credentials with OIDC ---
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # --- Step 3: Login to Amazon ECR ---
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # --- Step 4: Build and Push Docker Image ---
      - name: Build and push Docker image
        id: build-image
        uses: docker/build-push-action@v6
        with:
          context: ./ai_service
          file: ./ai_service/Dockerfile
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.ref_name }}-${{ github.sha }}
          cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:cache
          cache-to: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:cache,mode=max

      # --- Step 5: Download Latest Task Definition ---
      - name: Get latest task definition
        id: task-def
        run: |
          aws ecs describe-task-definition \
            --task-definition $ECS_TASK_DEFINITION_FAMILY \
            --query taskDefinition > task-definition.json
          echo "task-def=task-definition.json" >> $GITHUB_OUTPUT

      # --- Step 6: Render New Task Definition ---
      - name: Render new task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-def }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.digest != '' && format('{0}@{1}', steps.login-ecr.outputs.registry + '/' + env.ECR_REPOSITORY, steps.build-image.outputs.digest) || steps.login-ecr.outputs.registry + '/' + env.ECR_REPOSITORY + ':' + github.ref_name + '-' + github.sha }}

      # --- Step 7: Deploy New Task Definition ---
      - name: Deploy new task definition to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
