# Name of the workflow, which will appear in the "Actions" tab of your GitHub repo
name: Deploy AI Service to AWS ECS

# 1. TRIGGER: Controls when the workflow will run
on:
  # Run this workflow on every push to the 'main' branch
  push:
    branches:
      - main
    # Only run if code inside the ai_service/ folder changes, to avoid unnecessary runs
    paths:
      - 'src/**'
      
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# --- Environment Variables ---
# Define variables that will be used across multiple steps in the workflow.
# Replace the values with your specific AWS and project details.
env:
  AWS_REGION: eu-north-1                   # Your AWS region (e.g., us-east-1)
  ECR_REPOSITORY: ai-insights-service     # The name of your ECR repository
  ECS_SERVICE: ai-insights-service        # The name of your ECS service
  ECS_CLUSTER: ai-insights-cluster        # The name of your ECS cluster
  ECS_TASK_DEFINITION: ai-insights-service-task.json # A file to store the new task definition
  CONTAINER_NAME: ai-service              # The name of the container in your ECS task definition

# --- Workflow Jobs ---
jobs:
  # This workflow contains a single job called "deploy"
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # A sequence of tasks that will be executed as part of the job
    steps:
      # --- Step 1: Code Checkout ---
      # Checks out your repository's code so the runner can access it
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Step 2: Configure AWS Credentials ---
      # Securely logs into your AWS account using the secrets stored in GitHub
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_ACCESS_KEY_SECRET }}
          aws-region: eu-north-1

      # --- Step 3: Login to Amazon ECR ---
      # Logs the Docker client into your private container registry
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # --- Step 4: Build, Tag, and Push Docker Image to ECR ---
      # This is the core build step
      - name: Build and push Docker image
        id: build-image
        env:
          # Use the ECR registry URI from the previous login step
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          # Use the unique Git commit SHA as the image tag for precise versioning
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the Docker image from the 'ai_service' directory
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./Dockerfile .
          # Push the built image to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Echo the image URI to be used in the next step
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # --- Step 5: Download existing ECS Task Definition ---
      # Gets the current task definition from ECS so we can update it with the new image
      - name: Download existing task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_SERVICE }} --query taskDefinition > ${{ env.ECS_TASK_DEFINITION }}

      # --- Step 6: Fill in the new image ID in the ECS Task Definition ---
      # This step updates the downloaded task definition JSON file with the new image URI from the build step
      - name: Fill in new image URI in task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      # --- Step 7: Deploy the new Task Definition to ECS ---
      # This registers the new task definition and updates the service to use it,
      # which triggers a zero-downtime rolling deployment.
      - name: Deploy new task definition to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true # Wait for the new tasks to be healthy before completing